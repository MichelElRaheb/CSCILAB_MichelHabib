//library calls
#include <stdio.h>
#include <stdbool.h>
#define SIZE 24
#define nRows 8
#define nCols 3

//function prototypes
bool isValid(const int arr[],int length, int pos);
void remove_element(int arr[], int length, int pos);
void insert_element(int arr[], int length, int pos, int value);
void reshape(int arr[], int length, int nRows, int nCols, int arr2d[nRows][nCols]);
void trans_matrix(int nRows, int nCols, const int mat[nRows][nCols], int mat_transp[nCols][nRows]);
bool found_duplicate(const int arr[], int length);

//main function
  int main() {
      int arr[SIZE] = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240};
      int arr2d[nRows][nCols];
      int mat_transp[nCols][nRows];

      // Testing remove_element
      printf("Original Array: \\n");
      print_array(arr, SIZE);
      remove_element(arr, SIZE, 2);
      printf("\\nArray after removing element at index 2: \\n");
      print_array(arr, SIZE - 1);

      // Testing insert_element
      insert_element(arr, SIZE - 1, 2, 80);
      printf("\\nArray after inserting 80 at index 2: \\n");
      print_array(arr, SIZE - 1);

      // Testing reshape
      reshape(arr, SIZE, nRows, nCols, arr2d);
      printf("\\nReshaped 1D array into 2D matrix: \\n");
      print_matrix(arr2d, nRows);

      // Testing transpose
      trans_matrix(nRows, nCols, arr2d, mat_transp);
      printf("\\nTranspose of the 2D matrix: \\n");
      for (int i = 0; i < nCols; i++) {
          for (int j = 0; j < nRows; j++) {
              printf("%d ", mat_transp[i][j]);
          }
          printf("\\n");
      }

      // Testing found_duplicate
      if (found_duplicate(arr, SIZE)) {
          printf("\\nDuplicates found in the array.\\n");
      } else {
          printf("\\nNo duplicates in the array.\\n");
      }

      return 0;
  }



//function definitions
bool isValid(const int arr[],int length, int pos) {
  if(pos >=0 && pos < length){
    return true;
  }
}

void remove_element(int arr[], int length, int pos) {
    if (!isValid(arr, length, pos)) {
        printf("Invalid index for removal!\\n");
        return;
    }
    for (int i = pos; i < length - 1; i++) {
        arr[i] = arr[i + 1];
    }
    arr[length - 1] = 0; // Optional: Clear the last element after shifting
}

void insert_element(int arr[], int length, int pos, int value) {
    if (!isValid(arr, length, pos)) {
        printf("Invalid index for insertion!\\n");
        return;
    }
    for (int i = length - 1; i > pos; i--) {
        arr[i] = arr[i - 1];
    }
    arr[pos] = value;
}

void reshape(const int arr[], int length, int nRows, int nCols, int arr2d[nRows][nCols]) {
    if (length != nRows * nCols) {
        printf("Cannot reshape: dimension mismatch!\\n");
        return;
    }
    for (int i = 0; i < length; i++) {
        arr2d[i / nCols][i % nCols] = arr[i];
    }
}

void trans_matrix(int nRows, int nCols, const int mat[nRows][nCols], int mat_transp[nCols][nRows]) {
    for (int i = 0; i < nRows; i++) {
        for (int j = 0; j < nCols; j++) {
            mat_transp[j][i] = mat[i][j];
        }
    }
}
bool found_duplicate(const int arr[], int length) {
    for (int i = 0; i < length; i++) {
        for (int j = i + 1; j < length; j++) {
            if (arr[i] == arr[j]) {
                return true;
            }
        }
    }
    return false;
}







